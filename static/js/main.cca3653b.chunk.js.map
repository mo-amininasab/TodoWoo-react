{"version":3,"sources":["store/dropdownSlice.js","components/UI/Hamburger.jsx","components/UI/Navbar.jsx","components/UI/Dropdown.jsx","components/pages/Current.jsx","components/pages/Create.jsx","components/pages/Completed.jsx","components/pages/Login.jsx","components/pages/NotFound.jsx","App.js","reportWebVitals.js","store/index.js","index.js"],"names":["dropdownSlice","createSlice","name","initialState","isOpen","reducers","dropdownHandler","state","dropdownActions","actions","Hamburger","isOpenDropdown","useSelector","dropdown","dispatch","useDispatch","className","onClick","fill","stroke","viewBox","xmlns","strokeLinecap","strokeLinejoin","strokeWidth","d","Navbar","to","activeClassName","Dropdown","isDropdownOpen","Current","Create","Completed","Login","NotFound","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAIMA,EAAgBC,YAAY,CAChCC,KAAM,WACNC,aAJ2B,CAAEC,QAAQ,GAKrCC,SAAU,CACRC,gBADQ,SACQC,GACdA,EAAMH,QAAUG,EAAMH,WAKfI,EAAkBR,EAAcS,QAC9BT,I,OCkCAU,MA7Cf,WACE,IAAMC,EAAiBC,aAAY,SAACL,GAAD,OAAWA,EAAMM,SAAST,UACvDU,EAAWC,cAMjB,OACE,qBAAKC,UAAU,2BAA2BC,QALpB,WACtBH,EAASN,EAAgBF,oBAIzB,SACIK,EAgBA,qBACEK,UAAU,qBACVE,KAAK,OACLC,OAAO,eACPC,QAAQ,YACRC,MAAM,6BALR,SAOE,sBACEC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,2BA1BN,qBACET,UAAU,qBACVE,KAAK,OACLC,OAAO,eACPC,QAAQ,YACRC,MAAM,6BALR,SAOE,sBACEC,cAAc,QACdC,eAAe,QACfC,YAAa,EACbC,EAAE,iCCqBCC,MA1Cf,WACE,OACE,sBAAKV,UAAU,qFAAf,UACE,sBAAKA,UAAU,8BAAf,UACE,oBAAIA,UAAU,yCAAd,qBACA,cAAC,IAAD,CACEW,GAAG,WACHC,gBAAgB,kEAChBZ,UAAU,oGAHZ,qBAOA,cAAC,IAAD,CACEW,GAAG,aACHC,gBAAgB,mEAChBZ,UAAU,qGAHZ,uBAOA,cAAC,IAAD,CACEW,GAAG,UACHC,gBAAgB,oEAChBZ,UAAU,sGAHZ,uBASF,8BACE,cAAC,IAAD,CACEW,GAAG,SACHX,UAAU,4GAFZ,qBAQF,cAAC,EAAD,QCaSa,MAlDf,WACE,IAAMC,EAAiBlB,aAAY,SAACL,GAAD,OAAWA,EAAMM,SAAST,UACvDU,EAAWC,cAEXT,EAAkB,WACtBQ,EAASN,EAAgBF,oBAG3B,OACE,mCACGwB,GACC,sBAAKd,UAAU,sCAAf,UACE,cAAC,IAAD,CACEW,GAAG,WACHC,gBAAgB,6BAChBZ,UAAU,mCACVC,QAASX,EAJX,qBAQA,cAAC,IAAD,CACEqB,GAAG,aACHC,gBAAgB,8BAChBZ,UAAU,mCACVC,QAASX,EAJX,uBAQA,cAAC,IAAD,CACEqB,GAAG,UACHC,gBAAgB,+BAChBZ,UAAU,mCACVC,QAASX,EAJX,oBASA,cAAC,IAAD,CACEqB,GAAG,SACHX,UAAU,mDACVC,QAASX,EAHX,yBChCKyB,MARf,WACE,OACE,qBAAKf,UAAU,cAAf,SACE,mBAAGA,UAAU,WAAb,6BCKSgB,MARf,WACE,OACE,qBAAKhB,UAAU,cAAf,SACE,mBAAGA,UAAU,WAAb,4BCKSiB,MARf,WACE,OACE,qBAAKjB,UAAU,cAAf,SACE,mBAAGA,UAAU,WAAb,+BCKSkB,MARf,WACE,OACE,qBAAKlB,UAAU,cAAf,SACE,mBAAGA,UAAU,WAAb,2BCMSmB,MATf,WACE,OACE,sBAAKnB,UAAU,cAAf,UACE,mBAAGA,UAAU,WAAb,iBACA,mBAAGA,UAAU,WAAb,4BC4BSoB,MApBf,WACE,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAArB,SACE,cAAC,IAAD,CAAUX,GAAG,eAEf,cAAC,IAAD,CAAOU,KAAK,WAAWE,UAAWR,EAASO,OAAK,IAChD,cAAC,IAAD,CAAOD,KAAK,aAAaE,UAAWN,IACpC,cAAC,IAAD,CAAOI,KAAK,UAAUE,UAAWP,IACjC,cAAC,IAAD,CAAOK,KAAK,SAASE,UAAWL,IAEhC,cAAC,IAAD,CAAOG,KAAK,IAAIE,UAAWJ,WChBpBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCCQ,EAJDC,YAAe,CAC3BC,QAAS,CAAEtC,SAAUb,EAAcmD,WCKrCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.cca3653b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initailDropdownState = { isOpen: false };\r\n\r\nconst dropdownSlice = createSlice({\r\n  name: 'dropdown',\r\n  initialState: initailDropdownState,\r\n  reducers: {\r\n    dropdownHandler(state) {\r\n      state.isOpen = !state.isOpen;\r\n    },\r\n  },\r\n});\r\n\r\nexport const dropdownActions = dropdownSlice.actions;\r\nexport default dropdownSlice;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { dropdownActions } from \"../../store/dropdownSlice\";\r\n\r\nfunction Hamburger() {\r\n  const isOpenDropdown = useSelector((state) => state.dropdown.isOpen);\r\n  const dispatch = useDispatch();\r\n\r\n  const dropdownHandler = () => {\r\n    dispatch(dropdownActions.dropdownHandler());\r\n  };\r\n\r\n  return (\r\n    <div className=\"md:hidden cursor-pointer\" onClick={dropdownHandler}>\r\n      {!isOpenDropdown ? (\r\n        <svg\r\n          className=\"w-7 h-7 text-white\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M4 6h16M4 12h16M4 18h16\"\r\n          />\r\n        </svg>\r\n      ) : (\r\n        <svg\r\n          className=\"w-7 h-7 text-white\"\r\n          fill=\"none\"\r\n          stroke=\"currentColor\"\r\n          viewBox=\"0 0 24 24\"\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M6 18L18 6M6 6l12 12\"\r\n          />\r\n        </svg>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Hamburger;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport Hamburger from \"./Hamburger\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n    <nav className=\"bg-gray-800 py-4 px-6 sm:px-12 md:px-24 lg:px-32 flex justify-between items-center\">\r\n      <div className=\"flex space-x-2 items-center\">\r\n        <h1 className=\"text-white mr-6 text-3xl font-semibold\">TodoWoo</h1>\r\n        <NavLink\r\n          to=\"/current\"\r\n          activeClassName=\"bg-blue-800 text-white px-3 py-2 rounded-md text-sm font-medium\"\r\n          className=\"bg-gray-900 hidden md:block text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-blue-800\"\r\n        >\r\n          Current\r\n        </NavLink>\r\n        <NavLink\r\n          to=\"/completed\"\r\n          activeClassName=\"bg-green-800 text-white px-3 py-2 rounded-md text-sm font-medium\"\r\n          className=\"bg-gray-900 hidden md:block text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-green-800\"\r\n        >\r\n          Completed\r\n        </NavLink>\r\n        <NavLink\r\n          to=\"/create\"\r\n          activeClassName=\"bg-purple-800 text-white px-3 py-2 rounded-md text-sm font-medium\"\r\n          className=\"bg-gray-900 hidden md:block text-white px-3 py-2 rounded-md text-sm font-medium hover:bg-purple-800\"\r\n        >\r\n          Create\r\n        </NavLink>\r\n      </div>\r\n\r\n      <div>\r\n        <NavLink\r\n          to=\"/login\"\r\n          className=\"text-gray-300 px-3 py-2 font-medium hidden md:block text-sm rounded-md hover:bg-gray-500 hover:text-white\"\r\n        >\r\n          Login\r\n        </NavLink>\r\n      </div>\r\n\r\n      <Hamburger />\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { dropdownActions } from \"../../store/dropdownSlice\";\r\n\r\nfunction Dropdown() {\r\n  const isDropdownOpen = useSelector((state) => state.dropdown.isOpen);\r\n  const dispatch = useDispatch();\r\n\r\n  const dropdownHandler = () => {\r\n    dispatch(dropdownActions.dropdownHandler());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isDropdownOpen && (\r\n        <div className=\"flex flex-col md:hidden bg-gray-900\">\r\n          <NavLink\r\n            to=\"/current\"\r\n            activeClassName=\"border-l-8 border-blue-800\"\r\n            className=\"bg-gray-900 text-white px-3 py-2\"\r\n            onClick={dropdownHandler}\r\n          >\r\n            Current\r\n          </NavLink>\r\n          <NavLink\r\n            to=\"/completed\"\r\n            activeClassName=\"border-l-8 border-green-800\"\r\n            className=\"bg-gray-900 text-white px-3 py-2\"\r\n            onClick={dropdownHandler}\r\n          >\r\n            Completed\r\n          </NavLink>\r\n          <NavLink\r\n            to=\"/create\"\r\n            activeClassName=\"border-l-8 border-purple-800\"\r\n            className=\"bg-gray-900 text-white px-3 py-2\"\r\n            onClick={dropdownHandler}\r\n          >\r\n            Create\r\n          </NavLink>\r\n\r\n          <NavLink\r\n            to=\"/login\"\r\n            className=\"text-gray-300 px-3 py-2 font-medium text-sm pb-3\"\r\n            onClick={dropdownHandler}\r\n          >\r\n            Login\r\n          </NavLink>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\n\r\nfunction Current() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <p className=\"text-6xl\">Current Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Current;\r\n","import React from \"react\";\r\n\r\nfunction Create() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <p className=\"text-6xl\">Create Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Create;\r\n","import React from \"react\";\r\n\r\nfunction Completed() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <p className=\"text-6xl\">Completed Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Completed;\r\n","import React from \"react\";\r\n\r\nfunction Login() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <p className=\"text-6xl\">Login Page</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"text-center\">\r\n      <p className=\"text-6xl\">404</p>\r\n      <p className=\"text-4xl\">Not Found!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from \"react\";\nimport { Route, Switch, Redirect } from \"react-router\";\n\n// Components\nimport Navbar from \"./components/UI/Navbar\";\nimport Dropdown from \"./components/UI/Dropdown\";\n\n// Pages\nimport Current from \"./components/pages/Current\";\nimport Create from \"./components/pages/Create\";\nimport Completed from \"./components/pages/Completed\";\nimport Login from \"./components/pages/Login\";\nimport NotFound from \"./components/pages/NotFound\";\n\nfunction App() {\n  return (\n    <>\n      <Navbar />\n      <Dropdown />\n      <Switch>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/current\" />\n        </Route>\n        <Route path=\"/current\" component={Current} exact />\n        <Route path=\"/completed\" component={Completed} />\n        <Route path=\"/Create\" component={Create} />\n        <Route path=\"/login\" component={Login} />\n\n        <Route path=\"*\" component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\r\n\r\nimport dropdownSlice from \"./dropdownSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: { dropdown: dropdownSlice.reducer },\r\n});\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter, HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\n\nimport store from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}